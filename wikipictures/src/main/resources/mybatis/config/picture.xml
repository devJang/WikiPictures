<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="picture">
	
	<insert id="registerHashtag" parameterType="hashtagVO">
		MERGE INTO hashtag
		USING DUAL
		ON(hashtag_name=#{hashtagName})
		WHEN MATCHED THEN  
		   update set hashtag_count=hashtag_count+1
		WHEN NOT MATCHED THEN
		  insert(pic_date,keyword,hashtag_name) values(#{pictureVO.pictureDate}, #{pictureVO.keyword}, #{hashtagName})
	</insert>
	
	<insert id="registerPicture" parameterType="pictureVO">
		insert into PICTURE
		(pic_date, keyword, path, author_comment, pic_space, category, id)
		values
		(#{pictureDate}, #{keyword}, #{path}, #{authorComment},
		#{pictureSpace}, #{category}, #{memberVO.id})
	</insert>
	
	<select id="getPictures" resultType="pictureVO">
		select path
		from picture
	</select>

	<select id="searchPicture" resultType="pictureVO">
		select pic_date as pictureDate, keyword, path, author_comment as authorComment, hits,
		 pic_space as pictureSpace, id, category from picture 
		where keyword like '%'||#{value}||'%'
	</select>
	
	<select id="picture" resultType="pictureVO">
		select pic_date as pictureDate, keyword, path, author_comment as authorComment, hits,
		 pic_space as pictureSpace, id, category from picture
		where pic_date=#{pictureDate}
		and keyword=#{keyword}
	</select>
	
	<select id="searchDetailPicture" resultType="hashtagVO">
		select p.pic_date as pictureDate, p.keyword, p.path, p.author_comment as authorComment, p.hits,
		 p.pic_space as pictureSpace, p.id, p.category, h.hashtag_name as hashtagName, h.hashtag_count as hashtagCount from picture p, hashtag h
		where p.keyword =#{pictureVO.keyword}
		and p.pic_date=#{pictureVO.pictureDate}
		and p.pic_date=h.pic_date
		and p.keyword=h.keyword
	</select>
	
	<select id="hashtagName" resultType="hashtagVO">
		select p.pic_date as pictureDate, p.keyword, p.path, p.author_comment as authorComment, p.hits,
		 p.pic_space as pictureSpace, p.id, p.category, h.hashtag_name as hashtagName from picture p, hashtag h
		where p.keyword=#{hashtagName}
		and p.pic_date=h.pic_date
		and p.keyword=h.keyword
	</select>
	
	<select id="totalContentCount" resultType="int">
		select count(*) from picture
	</select>
	
	<resultMap type="pictureVO" id="pictureRM">
		<result property="pictureDate" column="pic_date" />
		<result property="authorComment" column="author_comment" />
		<result property="pictureSpace" column="pic_space" />
		<result property="memberVO.id" column="id"/>
	</resultMap>
	
	<select id="mypictures" resultMap="pictureRM" parameterType="pictureVO">
	select id,pic_date,rnum,keyword,path,author_comment,hits,pic_space,category from 
	(select id, pic_date,row_number() over(order by keyword desc) as rnum,keyword,path,author_comment,hits,pic_space,category
	from picture) where rnum between #{startRowNumber} and #{endRowNumber} order by keyword desc
	</select>
	
</mapper>
	
		
		




	<!-- 	select m.id,p.rnum,p.keyword,p.path,p.author_comment,p.hits,p.pic_space,p.category from (select row_number() over(order by keyword desc) as rnum,
		keyword,path,author_comment,hits,pic_space,category
	from picture p),member m where m.id=p.id and rnum between #{startRowNumber} and #{endRowNumber} order by keyword desc -->


		<!-- select pictureDate,keyword,path,authorComment,hits,pictureSpace,category,uploadFile
		from (select row_number() over(order by keyword desc) as rnum, pictureDate,path,authorComment,hits,pictureSpace,category,uploadFile
		from picture)
		where rnum between #{startRowNumber} and #{endRowNumber} order by no desc -->




		<!-- SELECT b.no,b.title,b.time_posted,b.hits,b.id,m.name FROM(
		SELECT row_number() over(order by no desc) as rnum,no,title,hits,
		to_char(time_posted,'YYYY.MM.DD') as time_posted,id
		FROM spring_board_inst
		) b,spring_member m where b.id=m.id and rnum between #{startRowNumber} and #{endRowNumber}
		order by no desc -->



